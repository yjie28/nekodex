{"version":3,"sources":["components/card/card.jsx","components/card-list/card-list.jsx","components/search-box/search-box.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","cat","id","name","username","CardList","cats","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredCats","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6RAIaA,G,MAAO,SAACC,GAAD,OAClB,sBAAKC,UAAU,iBAAf,UACE,qBACEC,IAAI,MACJC,IAAG,+BAA0BH,EAAMI,IAAIC,GAApC,4BAEL,6BAAKL,EAAMI,IAAIE,OACf,mCAAMN,EAAMI,IAAIG,iBCMPC,G,MAAW,SAACR,GAAD,OACtB,qBAAKC,UAAU,YAAf,SACGD,EAAMS,KAAKC,KAAI,SAACN,GAAD,OACd,cAAC,EAAD,CAAmBA,IAAKA,GAAbA,EAAIC,WChBRM,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACvB,uBAAOC,KAAK,SAASF,YAAaA,EAAaG,SAAUF,MCmE5CG,G,wDA9Db,aAAe,IAAD,8BACZ,gBAsCFH,aAAe,SAACI,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SArCtC,EAAKC,MAAQ,CACXb,KAAM,GACNU,YAAa,IALH,E,gEAoBO,IAAD,OAClBI,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAW,EAAKT,SAAS,CAAET,KAAMkB,S,+BAoBjC,IAAD,EACuBC,KAAKN,MAA3Bb,EADD,EACCA,KAAMU,EADP,EACOA,YACRU,EAAepB,EAAKqB,QAAO,SAAC1B,GAAD,OAC/BA,EAAIE,KAAKyB,cAAcC,SAASb,EAAYY,kBAG9C,OACE,sBAAK9B,UAAU,MAAf,UACE,yCACA,cAAC,EAAD,CACEW,YAAY,iBACZC,aAAce,KAAKf,eAErB,cAAC,EAAD,CAAUJ,KAAMoB,W,GA3DNI,cCKHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.b3a84b4e.chunk.js","sourcesContent":["import React from 'react';\n\nimport './card.css';\n\nexport const Card = (props) => (\n  <div className=\"card-container\">\n    <img\n      alt=\"cat\"\n      src={`https://robohash.org/${props.cat.id}?set=set4&size=180x180`}\n    />\n    <h2>{props.cat.name}</h2>\n    <h6>@{props.cat.username}</h6>\n  </div>\n);\n","import React from 'react';\n\nimport { Card } from '../card/card';\n\nimport './card-list.css';\n\n/*\n *  components take in 'props'\n *  'props' is going to be the parameter we get from the functional component\n *\n *  props: one main property of props is children,\n *  if there's no children, it will be null\n *  children is what is passed in between in the component\n *\n */\n\n// responsible for listing out the cards, but not how the cards will look\nexport const CardList = (props) => (\n  <div className=\"card-list\">\n    {props.cats.map((cat) => (\n      <Card key={cat.id} cat={cat} />\n    ))}\n  </div>\n);\n","import React from 'react';\n\nimport './search-box.css';\n\nexport const SearchBox = ({ placeholder, handleChange }) => (\n  <input type=\"search\" placeholder={placeholder} onChange={handleChange} />\n);\n","import { Component } from 'react';\n\nimport { CardList } from './components/card-list/card-list';\nimport { SearchBox } from './components/search-box/search-box';\n\nimport './App.css';\n\nclass App extends Component {\n  // class has access to state\n\n  constructor() {\n    super(); // super calls the constructor method on the component class\n\n    this.state = {\n      cats: [],\n      searchField: '',\n    };\n\n    /*  define 'this' in methods in the constructor\n        \n        function.bind is a method on any function that returns a new \n        function where the context of 'this' is set to whatever we pass to it\n        \n        in this case, the context of 'this' is set to the 'this' keyword \n        that was defined in the constructor\n    */\n\n    // this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then((response) => response.json())\n      .then((users) => this.setState({ cats: users }));\n  }\n\n  /*  setState is undefined, because JS by default doesn't set its scope of 'this' on functions,\n      have to explicitly state what contect 'this' should be */\n\n  /* handleChange(e) {\n    this.setState({ searchField: e.target.value });\n  } */\n\n  /*  arrow functions automatically allow set 'this' when the method was defined, \n      lexical scoping - binds the context to the place where they were defined in the first place\n      \n      When JS defined App Component, it also defined all of the methods on the components, \n      including the handleChange because it is an arrow function\n  */\n  handleChange = (e) => {\n    this.setState({ searchField: e.target.value });\n  };\n\n  render() {\n    const { cats, searchField } = this.state;\n    const filteredCats = cats.filter((cat) =>\n      cat.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n\n    return (\n      <div className=\"App\">\n        <h1>Nekodex</h1>\n        <SearchBox\n          placeholder=\"Search Cats...\"\n          handleChange={this.handleChange}\n        />\n        <CardList cats={filteredCats} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n/*\n *  _state change -> re-render,\n *  whatever is inside {} is JS expression\n *\n *  _state vs. props\n *  state becomes prop once it gets passed down to a component\n *\n *  this.setState is an asynchronous function,\n *  if we want to do something with the state immediately after we set it,\n *  then we have to include a second argument\n *\n *  _SetState should NOT be called in render,\n *  if state changes, App re-renders, and setState gets called again,\n *  this will create a loop\n *\n *  _functional component - no state (no access to the constructor) or life cycle methods\n *  just returns some HTML\n *\n *  _Writing methods on -classes-\n *  'this' keyword is set to the context of our class component,\n *  'this' keyword gets bound differently depending on how we write the class method\n *\n */\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}